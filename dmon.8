.\" Man page generated from reStructeredText.
.
.TH DMON 8 "" "" ""
.SH NAME
dmon \- Daemonize and monitor processes
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBdmon [options] cmd [cmdoptions] [\-\- logcmd [logcmdoptions]]\fP
.SH DESCRIPTION
.sp
The \fBdmon\fP program will launch a program and re\-launch it whenever it
dies. Optionally, the standard output streams of the programs may be piped
into a second program (named \fIlog command\fP), which will receive the output
of the program in its standard input stream. The log command will be also
monitored and re\-launched when it dies.
.SH USAGE
.sp
Command line options:
.INDENT 0.0
.TP
.BI \-p \ PATH
.
Write the PID of the master \fBdmon\fP process to a file in the
specified \fIPATH\fP. You can signal the process to interact with
it. (See \fI\%SIGNALS\fP below.)
.TP
.BI \-i \ TIME
.
When execution of the process ends with a successful (zero)
exit status, wait for \fITIME\fP seconds before respawning the
process instead of doing it immediately. This can be used to
make \fBdmon\fP behave as el\-cheapo \fIcron(8)\fP replacement. This
option cannot be used along with \fB\-1\fP.
.TP
.BI \-t \ TIME
.
If the process takes longer than \fITIME\fP seconds to complete,
terminate it by sending the \fITERM\fP/\fICONT\fP signal combo. Then
the process will be respawned again. This is useful to ensure
that potentially locking processes which should take less than
some known time limit do not hog the computer. Most likely,
this flag is useful in conjunction with \fB\-1\fP, and with
\fB\-n\fP e.g. when using it in a \fIcron(8)\fP job.
.TP
.BI \-L \ NUMBER
.
Enable tracking the system\(aqs load average, and suspend the
execution of the command process when the system load goes
over \fINUMBER\fP. To pause the process, \fISTOP\fP signal will be
sent to it. You may want to use \fB\-l\fP as well to specify
under which load value the process is resumed, otherwise
when the system load falls below \fINUMBER/2\fP the process will
be resumed.
.TP
.BI \-l \ NUMBER
.
When using \fB\-L\fP, the command process execution will be
resumed when the system load falls below \fINUMBER\fP, instead of
using the default behavior of resuming the process when the
load falls below half the limit specified with \fB\-L\fP.
.TP
.BI \-u \ UIDGID
.
Executes the command with the credentials of user \fIUID\fP,
and additional group \fIGID\fP specified separated with
semicolons. Both user and group identifiers might be given
as strings or numerically.
.TP
.BI \-U \ UIDGID
.
Executes the \fBlog\fP command with the credentials of user
\fIUID\fP, and additional group \fIGID\fP specified separated with
semicolons. Both user and group identifiers might be given
as strings or numerically.
.TP
.B \-n
.
Do not daemonize: \fBdmon\fP will keep working in foreground,
without detaching and without closing its standard input and
output streams. This is useful for debugging and, to a limited
extent, to run interactive programs.
.TP
.B \-1
.
Run command only once: if the command exits with a success
status (i.e. exit code is zero), then \fBdmon\fP will exit and
stop the logging process. If the program dies due to a signal
or with a non\-zero exit status, it is respawned. This option
tends to be used in conjunction with \fB\-n\fP, and cannot be
used with \fB\-i\fP.
.TP
.B \-e
.
Redirect both the standard error and standard output streams
to the log command. If not specified, only the standard output
is redirected.
.TP
.B \-s
.
Forward signals \fICONT\fP, \fIALRM\fP, \fIQUIT\fP, \fIUSR1\fP, \fIUSR2\fP and
\fIHUP\fP to the monitored command when \fBdmon\fP receives them.
.TP
.B \-S
.
Forward signals \fICONT\fP, \fIALRM\fP, \fIQUIT\fP, \fIUSR1\fP, \fIUSR2\fP and
\fIHUP\fP to the log command when \fBdmon\fP receives them.
.TP
.B \-h
.
Show a summary of available options.
.UNINDENT
.sp
Usual log commands include \fIdlog(8)\fP and \fIdslog(8)\fP, which are part of the
\fBdmon\fP suite. Other log commands like \fIrotlog(8)\fP or \fImultilog(8)\fP may be
used as long as they consume data from standard input and do not detach
themsemlves from the controlling process.
.sp
As a convenience, time values passed to \fB\-i\fP and \fB\-t\fP may be specified
with the following suffixes:
.INDENT 0.0
.IP \(bu 2
.
\fBm\fP: Minutes, e.g. \fB30m\fP means "30 minutes".
.IP \(bu 2
.
\fBh\fP: Hours, e.g. \fB4h\fP means "4 hours".
.IP \(bu 2
.
\fBd\fP: Days, e.g. \fB3d\fP means "3 days".
.IP \(bu 2
.
\fBw\fP: Weeks, e.g. \fB1w\fP means "1 week".
.UNINDENT
.SH SIGNALS
.sp
Signals may be used to interact with the monitored processes and \fBdmon\fP
itself.
.sp
The \fBTERM\fP and \fBINT\fP signals are catched by \fBdmon\fP, and they will
make it shut down gracefully: both the main command and the log command
will receive a \fBTERM\fP signal followed by a \fBCONT\fP and they will be
waited for.
.sp
When at least one of \fB\-s\fP or \fB\-S\fP are used, the \fBCONT\fP, \fBALRM\fP,
\fBQUIT\fP, \fBUSR1\fP, \fBUSR2\fP and \fBHUP\fP signals are forwarded to the
managed processes. By default, if none of the options are used, those
signals are ignored.
.SH EXAMPLES
.sp
The following command will supervise a shell which prints a string each
fifth second, and the output is logged to a file with timestamps:
.sp
.nf
.ft C
dmon \-n sh \-c \(aqwhile echo "Hello World" ; do sleep 5 ; done\(aq \e
  \-\- dlog logfile
.ft P
.fi
.sp
In order to turn the previous example into a daemon, we only need to
remove the \fB\-n\fP. I may be convenient to specify a PID file path:
.sp
.nf
.ft C
dmon \-p example.pid \e
  sh \-c \(aqwhile echo "Hello dmon" ; do sleep 5 ; done\(aq \e
  \-\- dlog logfile
.ft P
.fi
.sp
The following example launches the \fIcron(8)\fP daemon with the logging
process running as user and group \fBlog:wheel\fP:
.sp
.nf
.ft C
dmon \-p /var/run/crond.pid \-u log:wheel \-e cron \-f \-\-
  \-\- dlog /var/log/cron.log
.ft P
.fi
.sp
This example will run a (probably lengthy) backup process, pausing it when
the system load goes above 3.5 and resuming it when the load drops below
1.0:
.sp
.nf
.ft C
dmon \-1 \-n \-l 1 \-L 3.5 rsync \-avz ~/ /backup/homedir
.ft P
.fi
.sp
If you have a PID file, terminating the daemon is an easy task:
.sp
.nf
.ft C
kill $(cat example.pid)
.ft P
.fi
.SH SEE ALSO
.sp
\fIdlog(8)\fP, \fIdslog(8)\fP, \fIrotlog(8)\fP, \fImultilog(8)\fP, \fIsupervise(8)\fP, \fIcron(8)\fP
.sp
\fI\%http://cr.yp.to/daemontools.html\fP
.SH AUTHOR
Adrian Perez <aperez@igalia.com>
.\" Generated by docutils manpage writer.
.\" 
.
